/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ScriptEditor.java
 *
 * Created on 24/08/2009, 21:33:14
 */

package noctools.script;
import noctools.settings.NocToolsSettings;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


/**
 *
 * @author Yuri
 */
public class ScriptEditor extends javax.swing.JDialog
{
    public enum EditorMode {NEW, EDIT, DUPLICATE};
    /** Creates new form ScriptEditor */
    public ScriptEditor(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
        script = null;
        mode = EditorMode.NEW;
        setTitle("Import New Script");

        // get the custom scripts data to the combo boxes
        LinkedList <String> allCustomStrings = ScriptsManager.getCustomScripts();
        for (String tempString : allCustomStrings)
        {
            scriptBeforeComboBox.addItem(new String(tempString));
            scriptAfterComboBox.addItem(new String(tempString));
        }
    }

    public ScriptEditor(java.awt.Frame parent, boolean modal, Script oldScript, EditorMode editorMode)
    {
        super(parent, modal);
        initComponents();
        mode = editorMode;
        script = new Script(oldScript);

        if (mode == EditorMode.EDIT)
            setTitle("Edit: " + script.getDescription());
        if (mode == EditorMode.DUPLICATE)
            setTitle("Edit (duplicate): " + script.getDescription());

        descriptionTextField.setText(script.getDescription());
        fileNameTextField.setText(script.getScriptFile());
        runApprovalCheckBox.setSelected(script.getShowWarning());
        quickScriptCheckBox.setSelected(script.getQickScript());
        runInParalelCheckBox.setSelected(script.getWorkInParalel());
        workOnWholeFarmsCheckBox.setSelected(script.getWorkOnWholeFarmsCountries());
        serverPopupCheckBox.setSelected(script.getAppearInPopupMenu());

        // get the custom scripts data to the combo boxes
        LinkedList <String> allCustomStrings = ScriptsManager.getCustomScripts();
        for (String tempString : allCustomStrings)
        {
            if (!script.getDescription().equalsIgnoreCase(tempString))
            {
                scriptBeforeComboBox.addItem(new String(tempString));
                scriptAfterComboBox.addItem(new String(tempString));
            }
        }

        // set the selection of the combo boxes. If the "scriptbefore" and "scriptafter" are null - choose "None"
        scriptBeforeComboBox.setSelectedItem((script.getScriptBefore() == null) ? "None" : script.getScriptBefore());
        scriptAfterComboBox.setSelectedItem((script.getScriptAfter() == null ? "None" : script.getScriptAfter()));

        String arguments = "";
        LinkedList<String> argumentsList = script.getArgumentsList();
        for (int i = 0; i < argumentsList.size(); i++)
        {
            String argument = argumentsList.get(i);
            arguments += argument;
            if (i != argumentsList.size() - 1)
                arguments += " ";
        }
        scriptParametersTextField.setText(arguments);

        if (script.getType().equalsIgnoreCase("Custom"))
            typeComboBox.setSelectedItem("Custom");

        if (script.getType().equalsIgnoreCase("Server"))
            typeComboBox.setSelectedItem("Server");

        if (script.getEndMessage() != null)
            endMessageTextField.setText(script.getEndMessage());
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        scriptFileSettingsPanel = new javax.swing.JPanel();
        scriptDescriptionLabel = new javax.swing.JLabel();
        descriptionTextField = new javax.swing.JTextField();
        scriptTypeLabel = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox();
        fileNameTextField = new javax.swing.JTextField();
        fileNameLabel = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        advancedSettingsPanel = new javax.swing.JPanel();
        quickScriptCheckBox = new javax.swing.JCheckBox();
        runApprovalCheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        endMessageTextField = new javax.swing.JTextField();
        runInParalelCheckBox = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        scriptBeforeComboBox = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        scriptAfterComboBox = new javax.swing.JComboBox();
        workOnWholeFarmsCheckBox = new javax.swing.JCheckBox();
        serverPopupCheckBox = new javax.swing.JCheckBox();
        cancelButton = new javax.swing.JButton();
        scriptParametersPanel = new javax.swing.JPanel();
        commandLineParametersLabel = new javax.swing.JLabel();
        scriptParametersTextField = new javax.swing.JTextField();
        serverNameLabel = new javax.swing.JLabel();
        serverIpLabel = new javax.swing.JLabel();
        serverShortNameLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        serverDnsNameLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        setResizable(false);

        jPanel1.setName("jPanel1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(noctools.NocToolsApp.class).getContext().getResourceMap(ScriptEditor.class);
        scriptFileSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("scriptFileSettingsPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("scriptFileSettingsPanel.border.titleFont"))); // NOI18N
        scriptFileSettingsPanel.setName("scriptFileSettingsPanel"); // NOI18N

        scriptDescriptionLabel.setFont(resourceMap.getFont("scriptDescriptionLabel.font")); // NOI18N
        scriptDescriptionLabel.setText(resourceMap.getString("scriptDescriptionLabel.text")); // NOI18N
        scriptDescriptionLabel.setName("scriptDescriptionLabel"); // NOI18N

        descriptionTextField.setToolTipText(resourceMap.getString("descriptionTextField.toolTipText")); // NOI18N
        descriptionTextField.setName("descriptionTextField"); // NOI18N

        scriptTypeLabel.setFont(resourceMap.getFont("scriptTypeLabel.font")); // NOI18N
        scriptTypeLabel.setText(resourceMap.getString("scriptTypeLabel.text")); // NOI18N
        scriptTypeLabel.setName("scriptTypeLabel"); // NOI18N

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Server", "Custom" }));
        typeComboBox.setName("typeComboBox"); // NOI18N
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        fileNameTextField.setEditable(false);
        fileNameTextField.setName("fileNameTextField"); // NOI18N

        fileNameLabel.setFont(resourceMap.getFont("fileNameLabel.font")); // NOI18N
        fileNameLabel.setText(resourceMap.getString("fileNameLabel.text")); // NOI18N
        fileNameLabel.setName("fileNameLabel"); // NOI18N

        browseButton.setText(resourceMap.getString("browseButton.text")); // NOI18N
        browseButton.setName("browseButton"); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scriptFileSettingsPanelLayout = new javax.swing.GroupLayout(scriptFileSettingsPanel);
        scriptFileSettingsPanel.setLayout(scriptFileSettingsPanelLayout);
        scriptFileSettingsPanelLayout.setHorizontalGroup(
            scriptFileSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scriptFileSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scriptFileSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scriptFileSettingsPanelLayout.createSequentialGroup()
                        .addGroup(scriptFileSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scriptTypeLabel)
                            .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(scriptFileSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scriptFileSettingsPanelLayout.createSequentialGroup()
                                .addComponent(fileNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseButton))
                            .addComponent(fileNameLabel)))
                    .addComponent(scriptDescriptionLabel)
                    .addComponent(descriptionTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
                .addContainerGap())
        );
        scriptFileSettingsPanelLayout.setVerticalGroup(
            scriptFileSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scriptFileSettingsPanelLayout.createSequentialGroup()
                .addComponent(scriptDescriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(scriptFileSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scriptTypeLabel)
                    .addComponent(fileNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scriptFileSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        advancedSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("advancedSettingsPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("advancedSettingsPanel.border.titleFont"))); // NOI18N
        advancedSettingsPanel.setName("advancedSettingsPanel"); // NOI18N

        quickScriptCheckBox.setText(resourceMap.getString("quickScriptCheckBox.text")); // NOI18N
        quickScriptCheckBox.setName("quickScriptCheckBox"); // NOI18N

        runApprovalCheckBox.setText(resourceMap.getString("runApprovalCheckBox.text")); // NOI18N
        runApprovalCheckBox.setName("runApprovalCheckBox"); // NOI18N

        jLabel6.setFont(resourceMap.getFont("jLabel6.font")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        endMessageTextField.setName("endMessageTextField"); // NOI18N

        runInParalelCheckBox.setText(resourceMap.getString("runInParalelCheckBox.text")); // NOI18N
        runInParalelCheckBox.setName("runInParalelCheckBox"); // NOI18N

        jLabel9.setFont(resourceMap.getFont("jLabel9.font")); // NOI18N
        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        scriptBeforeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));
        scriptBeforeComboBox.setName("scriptBeforeComboBox"); // NOI18N

        jLabel10.setFont(resourceMap.getFont("jLabel10.font")); // NOI18N
        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        scriptAfterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));
        scriptAfterComboBox.setName("scriptAfterComboBox"); // NOI18N

        workOnWholeFarmsCheckBox.setText(resourceMap.getString("workOnWholeFarmsCheckBox.text")); // NOI18N
        workOnWholeFarmsCheckBox.setName("workOnWholeFarmsCheckBox"); // NOI18N

        serverPopupCheckBox.setText(resourceMap.getString("serverPopupCheckBox.text")); // NOI18N
        serverPopupCheckBox.setName("serverPopupCheckBox"); // NOI18N

        javax.swing.GroupLayout advancedSettingsPanelLayout = new javax.swing.GroupLayout(advancedSettingsPanel);
        advancedSettingsPanel.setLayout(advancedSettingsPanelLayout);
        advancedSettingsPanelLayout.setHorizontalGroup(
            advancedSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(advancedSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serverPopupCheckBox)
                    .addComponent(workOnWholeFarmsCheckBox)
                    .addGroup(advancedSettingsPanelLayout.createSequentialGroup()
                        .addComponent(quickScriptCheckBox)
                        .addGap(52, 52, 52))
                    .addComponent(runInParalelCheckBox)
                    .addComponent(runApprovalCheckBox)
                    .addComponent(jLabel9)
                    .addComponent(scriptBeforeComboBox, 0, 390, Short.MAX_VALUE)
                    .addComponent(jLabel10)
                    .addComponent(scriptAfterComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 390, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addComponent(endMessageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
                .addContainerGap())
        );
        advancedSettingsPanelLayout.setVerticalGroup(
            advancedSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedSettingsPanelLayout.createSequentialGroup()
                .addComponent(workOnWholeFarmsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runApprovalCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quickScriptCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runInParalelCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverPopupCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scriptBeforeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scriptAfterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        scriptParametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("scriptParametersPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("scriptParametersPanel.border.titleFont"))); // NOI18N
        scriptParametersPanel.setName("scriptParametersPanel"); // NOI18N

        commandLineParametersLabel.setFont(resourceMap.getFont("commandLineParametersLabel.font")); // NOI18N
        commandLineParametersLabel.setText(resourceMap.getString("commandLineParametersLabel.text")); // NOI18N
        commandLineParametersLabel.setName("commandLineParametersLabel"); // NOI18N

        scriptParametersTextField.setName("scriptParametersTextField"); // NOI18N

        serverNameLabel.setText(resourceMap.getString("serverNameLabel.text")); // NOI18N
        serverNameLabel.setName("serverNameLabel"); // NOI18N

        serverIpLabel.setText(resourceMap.getString("serverIpLabel.text")); // NOI18N
        serverIpLabel.setName("serverIpLabel"); // NOI18N

        serverShortNameLabel.setText(resourceMap.getString("serverShortNameLabel.text")); // NOI18N
        serverShortNameLabel.setName("serverShortNameLabel"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        serverDnsNameLabel.setText(resourceMap.getString("serverDnsNameLabel.text")); // NOI18N
        serverDnsNameLabel.setName("serverDnsNameLabel"); // NOI18N

        javax.swing.GroupLayout scriptParametersPanelLayout = new javax.swing.GroupLayout(scriptParametersPanel);
        scriptParametersPanel.setLayout(scriptParametersPanelLayout);
        scriptParametersPanelLayout.setHorizontalGroup(
            scriptParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scriptParametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scriptParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scriptParametersTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                    .addComponent(commandLineParametersLabel)
                    .addComponent(serverNameLabel)
                    .addComponent(serverIpLabel)
                    .addComponent(serverShortNameLabel)
                    .addComponent(serverDnsNameLabel)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7))
                .addContainerGap())
        );
        scriptParametersPanelLayout.setVerticalGroup(
            scriptParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scriptParametersPanelLayout.createSequentialGroup()
                .addComponent(commandLineParametersLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scriptParametersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(serverNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverIpLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverShortNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverDnsNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(scriptFileSettingsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(advancedSettingsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(scriptParametersPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scriptFileSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scriptParametersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(advancedSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseButtonActionPerformed
    {//GEN-HEADEREND:event_browseButtonActionPerformed
        JFileChooser fc = new JFileChooser(NocToolsSettings.getScriptsDir());
        fc.setAcceptAllFileFilterUsed(false);
        fc.setCurrentDirectory(new java.io.File(noctools.settings.NocToolsSettings.getScriptsDir()));
        fc.setFileFilter(new ExecutableFileFilter());
        int returnVal = fc.showDialog(this.getGlassPane(), "Open");

        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            fileNameTextField.setText(fc.getSelectedFile().getName());
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        boolean dataOk = false;

        if (descriptionTextField.getText().equalsIgnoreCase(""))
            JOptionPane.showMessageDialog(this, "Please add a description");

        else if (ScriptsManager.findDescriptionIgnoreCase(descriptionTextField.getText()) && (mode == EditorMode.NEW || mode == EditorMode.DUPLICATE))
            JOptionPane.showMessageDialog(this, "A script with this description already exists");

        else if (fileNameTextField.getText().equalsIgnoreCase(""))
            JOptionPane.showMessageDialog(this, "Please select a script file");

        else if (!argumentIsValidated(scriptParametersTextField.getText()))
            JOptionPane.showMessageDialog(this, "Please make sure that you entered all the parameters correctly");

        else
            dataOk = true;

        if (dataOk)
        {
            //collect the data from the form and create a script instance from it
            // TODO When a file is chosen, we have to copy it to the scripts folder
            String scriptFile = fileNameTextField.getText();
            String scriptType = typeComboBox.getSelectedItem().toString();
            String description = descriptionTextField.getText();
            boolean showWarning = runApprovalCheckBox.isSelected();
            boolean workInParalel = runInParalelCheckBox.isSelected();
            boolean quickScript = quickScriptCheckBox.isSelected();
            String endMessage = (endMessageTextField.getText().equalsIgnoreCase("") ? null : endMessageTextField.getText());
            String scriptBefore = (scriptBeforeComboBox.getSelectedItem().toString().equalsIgnoreCase("None")
                    ? null : scriptBeforeComboBox.getSelectedItem().toString());
            String scriptAfter = (scriptAfterComboBox.getSelectedItem().toString().equalsIgnoreCase("None")
                    ? null : scriptAfterComboBox.getSelectedItem().toString());
            boolean workOnWholeFarmsCountries = workOnWholeFarmsCheckBox.isSelected();
            boolean appearInPopupMenu = serverPopupCheckBox.isSelected();

            Script newScript = new Script(scriptFile, scriptType, description, showWarning, 
                                                                                    workInParalel, quickScript, endMessage, scriptBefore,
                                                                                    scriptAfter, workOnWholeFarmsCountries, appearInPopupMenu);

            //Add arguments
            newScript.setArgumentsList(extractArguments(scriptParametersTextField.getText()));

            //if we are in DUPLICATE mode or NEW mode then just add the script
            if (mode == EditorMode.DUPLICATE || mode == EditorMode.NEW)
                ScriptsManager.updateScript(newScript, null);
            else
                // if we are in EDIT mode, then we have to update the existing script
                ScriptsManager.updateScript(newScript, script);  // script could be null (if this is not "edit")

            this.dispose();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * changes the gui of the script editor window according to script type selection of the typeComboBox
     * @param evt
     */
    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        if (typeComboBox.getSelectedItem().toString().equalsIgnoreCase("custom"))
        {
            workOnWholeFarmsCheckBox.setEnabled(false);
            runInParalelCheckBox.setEnabled(false);
            serverNameLabel.setEnabled(false);
            serverShortNameLabel.setEnabled(false);
            serverIpLabel.setEnabled(false);
            serverDnsNameLabel.setEnabled(false);
            serverPopupCheckBox.setEnabled(false);
        }
        else
        {
            workOnWholeFarmsCheckBox.setEnabled(true);
            runInParalelCheckBox.setEnabled(true);
            serverNameLabel.setEnabled(true);
            serverShortNameLabel.setEnabled(true);
            serverIpLabel.setEnabled(true);
            serverDnsNameLabel.setEnabled(true);
            serverPopupCheckBox.setEnabled(true);
        }

    }//GEN-LAST:event_typeComboBoxActionPerformed

    public static LinkedList <String> extractArguments(String argStr)
    {
        LinkedList<String> argList = new LinkedList<String>();
        if (argStr != null)
        {
            if (!argStr.equalsIgnoreCase(""))
            {
                String[] argArr = argStr.split(" ");
                int i = 0;

                // main loop
                while (i < argArr.length)
                {
                    String tempArgument = argArr[i];
                    
                    // if we have a "%U[window title]" argument
                    if (tempArgument.indexOf('[') != -1)
                    {
                        String bigArgument = "";
                        while (tempArgument.indexOf(']') == -1 && i < argArr.length)
                        {
                            // in order to avoid adding space at the begining
                            if (!bigArgument.equalsIgnoreCase(""))
                                bigArgument += " ";

                            bigArgument += tempArgument;
                            i++;
                            tempArgument = argArr[i];
                        }
                        
                        // if we have reached the end of "%U[window title]" argument
                        if (tempArgument.indexOf(']') != -1)
                        {
                            if (!bigArgument.equalsIgnoreCase(""))
                                bigArgument += " ";
                            
                            bigArgument += tempArgument;
                            argList.add(bigArgument);
                        }

                    }//end of - if (tempArgument.indexOf('[') != -1)

                    else
                    {
                        // don't add empty arguments (in case the user entered more than one space between arguments)
                        if (!tempArgument.equalsIgnoreCase(""))
                            argList.add(tempArgument);
                    }
                    i++;
                } //end of  main loop
                
            }
        }
        return argList;
    }

    /**
     * Makes sure that the argument line is correct
     * @param arguments Argument line string
     * @return
     */
    public static boolean argumentIsValidated(String arguments)
    {

        boolean validated = true;
        int i = 0;
        int bracketsCounter = 0;

        if (arguments != null)
        {
            char [] argArr = arguments.toCharArray();
            while (i < argArr.length && validated)
            {
                if (argArr[i] == '[')
                    bracketsCounter++;
                else if (argArr[i] == ']')
                    bracketsCounter--;

                if (bracketsCounter > 1 || bracketsCounter < 0)
                    validated = false;

                i++;
            }
        }

        if (validated && bracketsCounter == 0)
            return true;
        else
            return false;
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ScriptEditor dialog = new ScriptEditor(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel advancedSettingsPanel;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel commandLineParametersLabel;
    private javax.swing.JTextField descriptionTextField;
    private javax.swing.JTextField endMessageTextField;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JTextField fileNameTextField;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox quickScriptCheckBox;
    private javax.swing.JCheckBox runApprovalCheckBox;
    private javax.swing.JCheckBox runInParalelCheckBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox scriptAfterComboBox;
    private javax.swing.JComboBox scriptBeforeComboBox;
    private javax.swing.JLabel scriptDescriptionLabel;
    private javax.swing.JPanel scriptFileSettingsPanel;
    private javax.swing.JPanel scriptParametersPanel;
    private javax.swing.JTextField scriptParametersTextField;
    private javax.swing.JLabel scriptTypeLabel;
    private javax.swing.JLabel serverDnsNameLabel;
    private javax.swing.JLabel serverIpLabel;
    private javax.swing.JLabel serverNameLabel;
    private javax.swing.JCheckBox serverPopupCheckBox;
    private javax.swing.JLabel serverShortNameLabel;
    private javax.swing.JComboBox typeComboBox;
    private javax.swing.JCheckBox workOnWholeFarmsCheckBox;
    // End of variables declaration//GEN-END:variables
    private Script script;
    EditorMode mode;
}
