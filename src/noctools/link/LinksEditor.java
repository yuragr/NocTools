/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LinksEditor.java
 *
 * Created on 18/10/2009, 20:24:27
 */

package noctools.link;
import noctools.settings.NocToolsSettings;
import noctools.endpoint.*;
import java.util.HashMap;
import javax.swing.*;
/**
 *
 * @author Yuri
 */
public class LinksEditor extends javax.swing.JDialog
{
    private ComparableMutableTreeNode _node;

    public LinksEditor(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
        _node = null;
    }

    /** Creates new form LinksEditor */
    public LinksEditor(java.awt.Frame parent, boolean modal, ComparableMutableTreeNode tempNode)
    {
        super(parent, modal);
        initComponents();
        _node = tempNode;

        Object tempObject = tempNode.getUserObject();
        if (tempObject instanceof Endpoint)
        {
            Endpoint endpoint = (Endpoint)tempObject;
            this.setTitle(endpoint.getName() + " Links");
            HashMap <String, String> links = endpoint.getLinks();
            linksTable.setModel(new LinksTableModel(links));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        linksTable = new javax.swing.JTable();
        cancelButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        linksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Description", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        linksTable.setName("linksTable"); // NOI18N
        linksTable.setAutoCreateRowSorter(true);
        linksTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(linksTable);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(noctools.NocToolsApp.class).getContext().getResourceMap(LinksEditor.class);
        linksTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("linksTable.columnModel.title0")); // NOI18N
        linksTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("linksTable.columnModel.title1")); // NOI18N

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        addButton.setText(resourceMap.getString("addButton.text")); // NOI18N
        addButton.setName("addButton"); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText(resourceMap.getString("removeButton.text")); // NOI18N
        removeButton.setName("removeButton"); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton)
                    .addComponent(addButton)
                    .addComponent(removeButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
    {//GEN-HEADEREND:event_addButtonActionPerformed
        // adds an empty row to the links table
        ((LinksTableModel)(linksTable.getModel())).addEmptyRow();
        linksTable.updateUI();
    }//GEN-LAST:event_addButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        // take all the links in the table and check if they are ok
        HashMap<String, String> linksMap = new HashMap<String, String>();
        int rowsCount = linksTable.getModel().getRowCount();
        boolean inputError = false;
        int i = 0;

        for (; i < rowsCount && !inputError; i++)
        {
            String description = linksTable.getModel().getValueAt(i, 0).toString();
            String link = linksTable.getModel().getValueAt(i, 1).toString();
            if (Endpoint.checkLink(link) && description != null && description.compareToIgnoreCase("") != 0)
                linksMap.put(description, link);
            else
                inputError = true;
        }

        if (inputError)
            // dispay a message that the input was corrupted
            JOptionPane.showMessageDialog(this, "The changes could not be saved. There was a problem in row " + i);

        else
        {
            // rewrite the links of the endpoint
            ((Endpoint)_node.getUserObject()).setLinks(linksMap);

            // rewrite the links of the XML document
            NocToolsSettings.updateLinksDocument(_node.getPath());

            // close the editor window
            this.dispose();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeButtonActionPerformed
    {//GEN-HEADEREND:event_removeButtonActionPerformed
        if (linksTable.getSelectedRow() != -1 && linksTable.getSelectedRowCount() == 1)
        {
            int[] rows = linksTable.getSelectedRows();

            if (rows[0] < linksTable.getModel().getRowCount())
            {
                String desctiption = linksTable.getModel().getValueAt(rows[0], 0).toString();
                String link = linksTable.getModel().getValueAt(rows[0], 1).toString();

                int answer = javax.swing.JOptionPane.YES_OPTION;

                if (!desctiption.equalsIgnoreCase("") || !link.equalsIgnoreCase(""))
                {
                    answer = JOptionPane.showConfirmDialog(null, desctiption, "Are you sure you want to delete?", JOptionPane.YES_NO_OPTION);


                }
                if (answer == javax.swing.JOptionPane.YES_OPTION)
                {
                    // removes the selected row from the model
                    ((LinksTableModel) (linksTable.getModel())).removeRow(linksTable.getSelectedRow());
                    linksTable.updateUI();
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Please select one link to delete");
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                LinksEditor dialog = new LinksEditor(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable linksTable;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

}
