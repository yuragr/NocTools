/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UserDetailsDialog.java
 *
 * Created on 24/12/2009, 00:45:48
 */

package noctools.settings;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import noctools.rdp.RdpManager;
import javax.swing.JOptionPane;
import java.util.Arrays;
import noctools.util.*;
/**
 *
 * @author Yuri
 */
public class UserDetailsDialog extends javax.swing.JDialog
{
    private class ActionHandler implements ActionListener
    {
        public void actionPerformed(ActionEvent e)
        {
            saveCredentials();
        }
    }

    /** Creates new form UserDetailsDialog */
    public UserDetailsDialog(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
        editMode = false;
        oldUser = null;
    }

    public UserDetailsDialog(java.awt.Frame parent, boolean modal, String userName)
    {
        super(parent, modal);
        try
        {
            initComponents();
            editMode = true;
            oldUser = userName;
            userNameTextField.setText(userName);

            // load user's credentials
            String encrypted = NocToolsSettings.getCredentials().get(userName);
            passwordPasswordField.setText(AES.decrypt(Key.getKey(), encrypted));
            repeatPasswordPasswordField.setText(AES.decrypt(Key.getKey(), encrypted));
        }
        catch (Exception e)
        {
            if (e.getMessage()  != null)
                org.apache.log4j.Logger.getRootLogger().error(e.getMessage());
            e.printStackTrace();
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        userDetailsPanel = new javax.swing.JPanel();
        userNameLabel = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordPasswordField = new javax.swing.JPasswordField();
        repeatPasswordLabel = new javax.swing.JLabel();
        repeatPasswordPasswordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(noctools.NocToolsApp.class).getContext().getResourceMap(UserDetailsDialog.class);
        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        userDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("userDetailsPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("userDetailsPanel.border.titleFont"))); // NOI18N
        userDetailsPanel.setName("userDetailsPanel"); // NOI18N

        userNameLabel.setFont(resourceMap.getFont("userNameLabel.font")); // NOI18N
        userNameLabel.setText(resourceMap.getString("userNameLabel.text")); // NOI18N
        userNameLabel.setName("userNameLabel"); // NOI18N

        userNameTextField.setText(resourceMap.getString("userNameTextField.text")); // NOI18N
        userNameTextField.setToolTipText(resourceMap.getString("userNameTextField.toolTipText")); // NOI18N
        userNameTextField.setName("userNameTextField"); // NOI18N
        userNameTextField.addActionListener(new ActionHandler());

        passwordLabel.setFont(resourceMap.getFont("passwordLabel.font")); // NOI18N
        passwordLabel.setText(resourceMap.getString("passwordLabel.text")); // NOI18N
        passwordLabel.setName("passwordLabel"); // NOI18N

        passwordPasswordField.setText(resourceMap.getString("passwordPasswordField.text")); // NOI18N
        passwordPasswordField.setName("passwordPasswordField"); // NOI18N
        passwordPasswordField.addActionListener(new ActionHandler());

        repeatPasswordLabel.setFont(resourceMap.getFont("repeatPasswordLabel.font")); // NOI18N
        repeatPasswordLabel.setText(resourceMap.getString("repeatPasswordLabel.text")); // NOI18N
        repeatPasswordLabel.setName("repeatPasswordLabel"); // NOI18N

        repeatPasswordPasswordField.setText(resourceMap.getString("repeatPasswordPasswordField.text")); // NOI18N
        repeatPasswordPasswordField.setName("repeatPasswordPasswordField"); // NOI18N
        repeatPasswordPasswordField.addActionListener(new ActionHandler());

        javax.swing.GroupLayout userDetailsPanelLayout = new javax.swing.GroupLayout(userDetailsPanel);
        userDetailsPanel.setLayout(userDetailsPanelLayout);
        userDetailsPanelLayout.setHorizontalGroup(
            userDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                    .addComponent(userNameLabel)
                    .addComponent(passwordLabel)
                    .addComponent(passwordPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                    .addComponent(repeatPasswordLabel)
                    .addComponent(repeatPasswordPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                .addContainerGap())
        );
        userDetailsPanelLayout.setVerticalGroup(
            userDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userDetailsPanelLayout.createSequentialGroup()
                .addComponent(userNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(passwordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(repeatPasswordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeatPasswordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(userDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        saveCredentials();
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * Saves the credentials and closes the dialog
     */
    private void saveCredentials()
    {
        String userName = userNameTextField.getText();

        // check if the user name is not empty
        if (!userName.equalsIgnoreCase(""))
        {
            // check if the password field is not empty
            if (passwordPasswordField.getPassword().length != 0)
            {
                // check if this user exists
                if (!RdpManager.userExists(userName) && editMode == false || editMode == true)
                {
                    if (noSpecialChars(userName))
                    {
                        if (Arrays.equals(passwordPasswordField.getPassword(), repeatPasswordPasswordField.getPassword()))
                        {
                            char[] passChar = passwordPasswordField.getPassword();
                            byte[] passByte = new byte[passChar.length];
                            for (int i = 0; i < passChar.length; i++)
                                passByte[i] = (byte)passChar[i];

                            try
                            {
                                String encrypted = AES.encrypt(Key.getKey(), passByte);
                                if (editMode)
                                {
                                    // we just have to replace the password
                                    if (!userName.equalsIgnoreCase(oldUser))
                                    {
                                        NocToolsSettings.getCredentials().remove(oldUser);
                                    }
                                }
                                NocToolsSettings.getCredentials().put(userName, encrypted);
                                NocToolsSettings.saveSettingsToFile();
                            }
                            catch (Exception e)
                            {
                                JOptionPane.showMessageDialog(this, "Could not save pasword");
                                if (e.getMessage()  != null)
                                    org.apache.log4j.Logger.getRootLogger().error(e.getMessage());
                                e.printStackTrace();
                            }
                            Arrays.fill(passByte, (byte)0);
                            Arrays.fill(passChar, '0');
                            this.dispose();
                        }
                        else
                            JOptionPane.showMessageDialog(this, "The passwords do not match");
                    }
                    else
                        JOptionPane.showMessageDialog(this, "User name cannot contain \\ / \' [ ] : | < > + = ; , ? * @ and spaces");
                }
                else
                    JOptionPane.showMessageDialog(this, "This user name already exists");
            }
            else
                JOptionPane.showMessageDialog(this, "The password cannot be empty");
        }
        else
            JOptionPane.showMessageDialog(this, "The user name cannot be empty");
        System.gc();
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                UserDetailsDialog dialog = new UserDetailsDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private boolean noSpecialChars(String str)
    {
        if (str != null)
        {
            if (str.indexOf("\\") != -1 || str.indexOf("/") != -1 || str.indexOf("\"") != -1 || str.indexOf("[") != -1 ||
                   str.indexOf("]") != -1 || str.indexOf(":") != -1 || str.indexOf("|") != -1 || str.indexOf("<") != -1 ||
                   str.indexOf(">") != -1 || str.indexOf("+") != -1 || str.indexOf("=") != -1 || str.indexOf(";") != -1 ||
                   str.indexOf(",") != -1 || str.indexOf("?") != -1 || str.indexOf("*") != -1 || str.indexOf("@") != -1 ||
                   str.indexOf(" ") != -1)
            {
                return false;
            }
            else
                return true;
        }
        else
            return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordPasswordField;
    private javax.swing.JLabel repeatPasswordLabel;
    private javax.swing.JPasswordField repeatPasswordPasswordField;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel userDetailsPanel;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables
    boolean editMode;
    String oldUser;
}
