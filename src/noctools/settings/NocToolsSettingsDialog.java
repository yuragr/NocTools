/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NocToolsSettingsDialog.java
 *
 * Created on 16/12/2009, 16:55:58
 */

package noctools.settings;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import noctools.*;
import javax.swing.JFrame;
import javax.swing.DefaultListModel;
import javax.swing.DefaultComboBoxModel;
import java.util.*;
import javax.swing.JOptionPane;
import noctools.rdp.RdpManager;
import javax.swing.JFileChooser;
import org.dom4j.*;
import org.dom4j.tree.DefaultElement;
/**
 *
 * @author Yuri
 */
public class NocToolsSettingsDialog extends javax.swing.JDialog
{

    /** Creates new form NocToolsSettingsDialog */
    public NocToolsSettingsDialog(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        setTitle("Noc Tools Settings");
        initComponents();

        // initialize all the settings
        updatetUsersList();
        updateDbUserComboBox();
        updateFilterList();
        updateConfigXmlList();

        credentialsManagerCheckBox.setSelected(NocToolsSettings.getUseCredentialsManager());
        doubleClickOnServerOpensRdpCheckBox.setSelected(NocToolsSettings.getDoubleClickOnServerOpensRdp());
        doubleClickOnEmptyCollapsesTreeCheckBox.setSelected(NocToolsSettings.getDoubleClickOnEmptyCollapsesTree());
        rightClickOnEmptyClearsSelectionCheckBox.setSelected(NocToolsSettings.getRightClickOnEmptyClearsSelection());
        serverPopupCheckBox.setSelected(NocToolsSettings.getShowServerPopupMenu());

        countSkypesCheckBox.setSelected(NocToolsSettings.getCountSkypes());
        countSkypesCheckBox.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                countSkypesAfterMaxWaitCheckBox.setEnabled(countSkypesCheckBox.isSelected());
            }
        });

        countSkypesAfterMaxWaitCheckBox.setSelected(NocToolsSettings.getCountSkypesAfterMaxWait());
        countSkypesAfterMaxWaitCheckBox.setEnabled(countSkypesCheckBox.isSelected());
        testConnectionCheckBox.setSelected(NocToolsSettings.getTestConnection());

        maxTaskFailures = NocToolsSettings.getMaxFailuresPerServer();
        taskFailuresTextField.setText(Integer.toString(maxTaskFailures));

        maxConnectionFailures = NocToolsSettings.getMaxConnectionFailuresPerServer();
        connectionFailuresTextField.setText(Integer.toString(maxConnectionFailures));

        maxPsexecFailures = NocToolsSettings.getMaxPsexecFailuresPerServer();
        psexecFailuresTextField.setText(Integer.toString(maxPsexecFailures));


        minWait = NocToolsSettings.getWaitBetweenRemotes();
        minWaitTextField.setText(Long.toString(minWait));

        maxWait = NocToolsSettings.getMaxWaitBetweenRemotes();
        maxWaitTextField.setText(Long.toString(maxWait));

        scriptDelay = NocToolsSettings.getStartupScriptDelay();
        scriptDelayTextField.setText(Long.toString(scriptDelay));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        settingsTabbedPane = new javax.swing.JTabbedPane();
        configXmlPanel = new javax.swing.JPanel();
        configXmlsPanel = new javax.swing.JPanel();
        configXmlScrollPane = new javax.swing.JScrollPane();
        configXmlList = new javax.swing.JList();
        addConfigXmlButton = new javax.swing.JButton();
        removeConfigXmlButton = new javax.swing.JButton();
        filterPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        filterList = new javax.swing.JList();
        addFilterButton = new javax.swing.JButton();
        editFilterButton = new javax.swing.JButton();
        removeFilterButton = new javax.swing.JButton();
        credentialsPanel = new javax.swing.JPanel();
        usersCredentialsPanel = new javax.swing.JPanel();
        usersScrollPane = new javax.swing.JScrollPane();
        usersList = new javax.swing.JList();
        addUserButton = new javax.swing.JButton();
        editUserButton = new javax.swing.JButton();
        removeUserButton = new javax.swing.JButton();
        credentialsManagerPanel = new javax.swing.JPanel();
        credentialsManagerCheckBox = new javax.swing.JCheckBox();
        dbUserPanel = new javax.swing.JPanel();
        dbUserComboBox = new javax.swing.JComboBox();
        serversTreePanel = new javax.swing.JPanel();
        treeSettingsPanel = new javax.swing.JPanel();
        doubleClickOnServerOpensRdpCheckBox = new javax.swing.JCheckBox();
        doubleClickOnEmptyCollapsesTreeCheckBox = new javax.swing.JCheckBox();
        rightClickOnEmptyClearsSelectionCheckBox = new javax.swing.JCheckBox();
        serverPopupCheckBox = new javax.swing.JCheckBox();
        serverStartupPanel = new javax.swing.JPanel();
        restrictionsPanel = new javax.swing.JPanel();
        countSkypesCheckBox = new javax.swing.JCheckBox();
        testConnectionCheckBox = new javax.swing.JCheckBox();
        countSkypesAfterMaxWaitCheckBox = new javax.swing.JCheckBox();
        failuresPanel = new javax.swing.JPanel();
        taskFailuresLabel = new javax.swing.JLabel();
        connectionFailuresLabel = new javax.swing.JLabel();
        psexecFailuresLabel = new javax.swing.JLabel();
        taskFailuresTextField = new javax.swing.JTextField();
        connectionFailuresTextField = new javax.swing.JTextField();
        psexecFailuresTextField = new javax.swing.JTextField();
        delaysPanel = new javax.swing.JPanel();
        minWaitLabel = new javax.swing.JLabel();
        maxWaitLabel = new javax.swing.JLabel();
        scriptDelayLabel = new javax.swing.JLabel();
        scriptDelayTextField = new javax.swing.JTextField();
        minWaitTextField = new javax.swing.JTextField();
        maxWaitTextField = new javax.swing.JTextField();
        closeButton = new javax.swing.JButton();

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setName("jList1"); // NOI18N
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        setResizable(false);

        settingsTabbedPane.setName("settingsTabbedPane"); // NOI18N

        configXmlPanel.setName("configXmlPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(noctools.NocToolsApp.class).getContext().getResourceMap(NocToolsSettingsDialog.class);
        configXmlsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("configXmlsPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("configXmlsPanel.border.titleFont"))); // NOI18N
        configXmlsPanel.setName("configXmlsPanel"); // NOI18N

        configXmlScrollPane.setName("configXmlScrollPane"); // NOI18N

        configXmlList.setModel(new javax.swing.DefaultListModel());
        configXmlList.setName("configXmlList"); // NOI18N
        configXmlScrollPane.setViewportView(configXmlList);

        addConfigXmlButton.setText(resourceMap.getString("addConfigXmlButton.text")); // NOI18N
        addConfigXmlButton.setName("addConfigXmlButton"); // NOI18N
        addConfigXmlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addConfigXmlButtonActionPerformed(evt);
            }
        });

        removeConfigXmlButton.setText(resourceMap.getString("removeConfigXmlButton.text")); // NOI18N
        removeConfigXmlButton.setName("removeConfigXmlButton"); // NOI18N
        removeConfigXmlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeConfigXmlButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout configXmlsPanelLayout = new javax.swing.GroupLayout(configXmlsPanel);
        configXmlsPanel.setLayout(configXmlsPanelLayout);
        configXmlsPanelLayout.setHorizontalGroup(
            configXmlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configXmlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configXmlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(configXmlScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .addGroup(configXmlsPanelLayout.createSequentialGroup()
                        .addComponent(addConfigXmlButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeConfigXmlButton)))
                .addContainerGap())
        );
        configXmlsPanelLayout.setVerticalGroup(
            configXmlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configXmlsPanelLayout.createSequentialGroup()
                .addComponent(configXmlScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configXmlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addConfigXmlButton)
                    .addComponent(removeConfigXmlButton))
                .addContainerGap())
        );

        filterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("filterPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("filterPanel.border.titleFont"))); // NOI18N
        filterPanel.setName("filterPanel"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        filterList.setModel(new javax.swing.DefaultListModel());
        filterList.setName("filterList"); // NOI18N
        jScrollPane3.setViewportView(filterList);

        addFilterButton.setText(resourceMap.getString("addFilterButton.text")); // NOI18N
        addFilterButton.setName("addFilterButton"); // NOI18N
        addFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFilterButtonActionPerformed(evt);
            }
        });

        editFilterButton.setText(resourceMap.getString("editFilterButton.text")); // NOI18N
        editFilterButton.setName("editFilterButton"); // NOI18N
        editFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFilterButtonActionPerformed(evt);
            }
        });

        removeFilterButton.setText(resourceMap.getString("removeFilterButton.text")); // NOI18N
        removeFilterButton.setName("removeFilterButton"); // NOI18N
        removeFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFilterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addComponent(addFilterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editFilterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeFilterButton)))
                .addContainerGap())
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filterPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addFilterButton)
                    .addComponent(editFilterButton)
                    .addComponent(removeFilterButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout configXmlPanelLayout = new javax.swing.GroupLayout(configXmlPanel);
        configXmlPanel.setLayout(configXmlPanelLayout);
        configXmlPanelLayout.setHorizontalGroup(
            configXmlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configXmlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configXmlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filterPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(configXmlsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        configXmlPanelLayout.setVerticalGroup(
            configXmlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configXmlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configXmlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        settingsTabbedPane.addTab(resourceMap.getString("configXmlPanel.TabConstraints.tabTitle"), configXmlPanel); // NOI18N

        credentialsPanel.setName("credentialsPanel"); // NOI18N

        usersCredentialsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("usersCredentialsPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("usersCredentialsPanel.border.titleFont"))); // NOI18N
        usersCredentialsPanel.setName("usersCredentialsPanel"); // NOI18N

        usersScrollPane.setName("usersScrollPane"); // NOI18N

        usersList.setModel(new javax.swing.DefaultListModel());
        usersList.setName("usersList"); // NOI18N
        usersScrollPane.setViewportView(usersList);

        addUserButton.setText(resourceMap.getString("addUserButton.text")); // NOI18N
        addUserButton.setName("addUserButton"); // NOI18N
        addUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButtonActionPerformed(evt);
            }
        });

        editUserButton.setText(resourceMap.getString("editUserButton.text")); // NOI18N
        editUserButton.setName("editUserButton"); // NOI18N
        editUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUserButtonActionPerformed(evt);
            }
        });

        removeUserButton.setText(resourceMap.getString("removeUserButton.text")); // NOI18N
        removeUserButton.setName("removeUserButton"); // NOI18N
        removeUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeUserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout usersCredentialsPanelLayout = new javax.swing.GroupLayout(usersCredentialsPanel);
        usersCredentialsPanel.setLayout(usersCredentialsPanelLayout);
        usersCredentialsPanelLayout.setHorizontalGroup(
            usersCredentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usersCredentialsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(usersCredentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .addGroup(usersCredentialsPanelLayout.createSequentialGroup()
                        .addComponent(addUserButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editUserButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeUserButton)))
                .addContainerGap())
        );
        usersCredentialsPanelLayout.setVerticalGroup(
            usersCredentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usersCredentialsPanelLayout.createSequentialGroup()
                .addComponent(usersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(usersCredentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addUserButton)
                    .addComponent(editUserButton)
                    .addComponent(removeUserButton))
                .addContainerGap())
        );

        credentialsManagerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("credentialsManagerPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("credentialsManagerPanel.border.titleFont"))); // NOI18N
        credentialsManagerPanel.setName("credentialsManagerPanel"); // NOI18N

        credentialsManagerCheckBox.setText(resourceMap.getString("credentialsManagerCheckBox.text")); // NOI18N
        credentialsManagerCheckBox.setToolTipText(resourceMap.getString("credentialsManagerCheckBox.toolTipText")); // NOI18N
        credentialsManagerCheckBox.setName("credentialsManagerCheckBox"); // NOI18N
        credentialsManagerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                credentialsManagerCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout credentialsManagerPanelLayout = new javax.swing.GroupLayout(credentialsManagerPanel);
        credentialsManagerPanel.setLayout(credentialsManagerPanelLayout);
        credentialsManagerPanelLayout.setHorizontalGroup(
            credentialsManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(credentialsManagerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(credentialsManagerCheckBox)
                .addContainerGap(165, Short.MAX_VALUE))
        );
        credentialsManagerPanelLayout.setVerticalGroup(
            credentialsManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(credentialsManagerPanelLayout.createSequentialGroup()
                .addComponent(credentialsManagerCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dbUserPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("dbUserPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("dbUserPanel.border.titleFont"))); // NOI18N
        dbUserPanel.setName("dbUserPanel"); // NOI18N

        dbUserComboBox.setToolTipText(resourceMap.getString("dbUserComboBox.toolTipText")); // NOI18N
        dbUserComboBox.setEnabled(false);
        dbUserComboBox.setName("dbUserComboBox"); // NOI18N
        dbUserComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbUserComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dbUserPanelLayout = new javax.swing.GroupLayout(dbUserPanel);
        dbUserPanel.setLayout(dbUserPanelLayout);
        dbUserPanelLayout.setHorizontalGroup(
            dbUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbUserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dbUserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(219, Short.MAX_VALUE))
        );
        dbUserPanelLayout.setVerticalGroup(
            dbUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbUserPanelLayout.createSequentialGroup()
                .addComponent(dbUserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout credentialsPanelLayout = new javax.swing.GroupLayout(credentialsPanel);
        credentialsPanel.setLayout(credentialsPanelLayout);
        credentialsPanelLayout.setHorizontalGroup(
            credentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(credentialsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(credentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usersCredentialsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dbUserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(credentialsManagerPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        credentialsPanelLayout.setVerticalGroup(
            credentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(credentialsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(credentialsManagerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usersCredentialsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dbUserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        settingsTabbedPane.addTab(resourceMap.getString("credentialsPanel.TabConstraints.tabTitle"), credentialsPanel); // NOI18N

        serversTreePanel.setName("serversTreePanel"); // NOI18N

        treeSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("treeSettingsPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("treeSettingsPanel.border.titleFont"))); // NOI18N
        treeSettingsPanel.setName("treeSettingsPanel"); // NOI18N

        doubleClickOnServerOpensRdpCheckBox.setText(resourceMap.getString("doubleClickOnServerOpensRdpCheckBox.text")); // NOI18N
        doubleClickOnServerOpensRdpCheckBox.setName("doubleClickOnServerOpensRdpCheckBox"); // NOI18N
        doubleClickOnServerOpensRdpCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleClickOnServerOpensRdpCheckBoxActionPerformed(evt);
            }
        });

        doubleClickOnEmptyCollapsesTreeCheckBox.setText(resourceMap.getString("doubleClickOnEmptyCollapsesTreeCheckBox.text")); // NOI18N
        doubleClickOnEmptyCollapsesTreeCheckBox.setName("doubleClickOnEmptyCollapsesTreeCheckBox"); // NOI18N
        doubleClickOnEmptyCollapsesTreeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleClickOnEmptyCollapsesTreeCheckBoxActionPerformed(evt);
            }
        });

        rightClickOnEmptyClearsSelectionCheckBox.setText(resourceMap.getString("rightClickOnEmptyClearsSelectionCheckBox.text")); // NOI18N
        rightClickOnEmptyClearsSelectionCheckBox.setName("rightClickOnEmptyClearsSelectionCheckBox"); // NOI18N
        rightClickOnEmptyClearsSelectionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightClickOnEmptyClearsSelectionCheckBoxActionPerformed(evt);
            }
        });

        serverPopupCheckBox.setText(resourceMap.getString("serverPopupCheckBox.text")); // NOI18N
        serverPopupCheckBox.setName("serverPopupCheckBox"); // NOI18N
        serverPopupCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverPopupCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout treeSettingsPanelLayout = new javax.swing.GroupLayout(treeSettingsPanel);
        treeSettingsPanel.setLayout(treeSettingsPanelLayout);
        treeSettingsPanelLayout.setHorizontalGroup(
            treeSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treeSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(treeSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(doubleClickOnServerOpensRdpCheckBox)
                    .addComponent(doubleClickOnEmptyCollapsesTreeCheckBox)
                    .addComponent(rightClickOnEmptyClearsSelectionCheckBox)
                    .addComponent(serverPopupCheckBox))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        treeSettingsPanelLayout.setVerticalGroup(
            treeSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treeSettingsPanelLayout.createSequentialGroup()
                .addComponent(doubleClickOnServerOpensRdpCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doubleClickOnEmptyCollapsesTreeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightClickOnEmptyClearsSelectionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverPopupCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout serversTreePanelLayout = new javax.swing.GroupLayout(serversTreePanel);
        serversTreePanel.setLayout(serversTreePanelLayout);
        serversTreePanelLayout.setHorizontalGroup(
            serversTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serversTreePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(treeSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        serversTreePanelLayout.setVerticalGroup(
            serversTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serversTreePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(treeSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(241, Short.MAX_VALUE))
        );

        settingsTabbedPane.addTab(resourceMap.getString("serversTreePanel.TabConstraints.tabTitle"), serversTreePanel); // NOI18N

        serverStartupPanel.setName("serverStartupPanel"); // NOI18N

        restrictionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("restrictionsPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("restrictionsPanel.border.titleFont"))); // NOI18N
        restrictionsPanel.setName("restrictionsPanel"); // NOI18N

        countSkypesCheckBox.setText(resourceMap.getString("countSkypesCheckBox.text")); // NOI18N
        countSkypesCheckBox.setName("countSkypesCheckBox"); // NOI18N

        testConnectionCheckBox.setText(resourceMap.getString("testConnectionCheckBox.text")); // NOI18N
        testConnectionCheckBox.setName("testConnectionCheckBox"); // NOI18N

        countSkypesAfterMaxWaitCheckBox.setText(resourceMap.getString("countSkypesAfterMaxWaitCheckBox.text")); // NOI18N
        countSkypesAfterMaxWaitCheckBox.setToolTipText(resourceMap.getString("countSkypesAfterMaxWaitCheckBox.toolTipText")); // NOI18N
        countSkypesAfterMaxWaitCheckBox.setName("countSkypesAfterMaxWaitCheckBox"); // NOI18N

        javax.swing.GroupLayout restrictionsPanelLayout = new javax.swing.GroupLayout(restrictionsPanel);
        restrictionsPanel.setLayout(restrictionsPanelLayout);
        restrictionsPanelLayout.setHorizontalGroup(
            restrictionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restrictionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(restrictionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(countSkypesCheckBox)
                    .addComponent(countSkypesAfterMaxWaitCheckBox)
                    .addComponent(testConnectionCheckBox))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        restrictionsPanelLayout.setVerticalGroup(
            restrictionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restrictionsPanelLayout.createSequentialGroup()
                .addComponent(countSkypesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countSkypesAfterMaxWaitCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testConnectionCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        failuresPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("failuresPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("failuresPanel.border.titleFont"))); // NOI18N
        failuresPanel.setName("failuresPanel"); // NOI18N

        taskFailuresLabel.setText(resourceMap.getString("taskFailuresLabel.text")); // NOI18N
        taskFailuresLabel.setName("taskFailuresLabel"); // NOI18N

        connectionFailuresLabel.setText(resourceMap.getString("connectionFailuresLabel.text")); // NOI18N
        connectionFailuresLabel.setName("connectionFailuresLabel"); // NOI18N

        psexecFailuresLabel.setText(resourceMap.getString("psexecFailuresLabel.text")); // NOI18N
        psexecFailuresLabel.setName("psexecFailuresLabel"); // NOI18N

        taskFailuresTextField.setText(resourceMap.getString("taskFailuresTextField.text")); // NOI18N
        taskFailuresTextField.setName("taskFailuresTextField"); // NOI18N
        taskFailuresTextField.setPreferredSize(new java.awt.Dimension(30, 20));
        taskFailuresTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taskFailuresTextFieldKeyReleased(evt);
            }
        });

        connectionFailuresTextField.setText(resourceMap.getString("connectionFailuresTextField.text")); // NOI18N
        connectionFailuresTextField.setName("connectionFailuresTextField"); // NOI18N
        connectionFailuresTextField.setPreferredSize(new java.awt.Dimension(30, 20));
        connectionFailuresTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                connectionFailuresTextFieldKeyReleased(evt);
            }
        });

        psexecFailuresTextField.setText(resourceMap.getString("psexecFailuresTextField.text")); // NOI18N
        psexecFailuresTextField.setName("psexecFailuresTextField"); // NOI18N
        psexecFailuresTextField.setPreferredSize(new java.awt.Dimension(30, 20));
        psexecFailuresTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                psexecFailuresTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout failuresPanelLayout = new javax.swing.GroupLayout(failuresPanel);
        failuresPanel.setLayout(failuresPanelLayout);
        failuresPanelLayout.setHorizontalGroup(
            failuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(failuresPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(failuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(failuresPanelLayout.createSequentialGroup()
                        .addComponent(taskFailuresLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(taskFailuresTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(failuresPanelLayout.createSequentialGroup()
                        .addComponent(connectionFailuresLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectionFailuresTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(failuresPanelLayout.createSequentialGroup()
                        .addComponent(psexecFailuresLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(psexecFailuresTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(212, Short.MAX_VALUE))
        );
        failuresPanelLayout.setVerticalGroup(
            failuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(failuresPanelLayout.createSequentialGroup()
                .addGroup(failuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskFailuresLabel)
                    .addComponent(taskFailuresTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(failuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectionFailuresLabel)
                    .addComponent(connectionFailuresTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(failuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(psexecFailuresLabel)
                    .addComponent(psexecFailuresTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        delaysPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("delaysPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("delaysPanel.border.titleFont"))); // NOI18N
        delaysPanel.setName("delaysPanel"); // NOI18N

        minWaitLabel.setText(resourceMap.getString("minWaitLabel.text")); // NOI18N
        minWaitLabel.setName("minWaitLabel"); // NOI18N

        maxWaitLabel.setText(resourceMap.getString("maxWaitLabel.text")); // NOI18N
        maxWaitLabel.setName("maxWaitLabel"); // NOI18N

        scriptDelayLabel.setText(resourceMap.getString("scriptDelayLabel.text")); // NOI18N
        scriptDelayLabel.setName("scriptDelayLabel"); // NOI18N

        scriptDelayTextField.setText(resourceMap.getString("scriptDelayTextField.text")); // NOI18N
        scriptDelayTextField.setName("scriptDelayTextField"); // NOI18N
        scriptDelayTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        scriptDelayTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                scriptDelayTextFieldKeyReleased(evt);
            }
        });

        minWaitTextField.setText(resourceMap.getString("minWaitTextField.text")); // NOI18N
        minWaitTextField.setName("minWaitTextField"); // NOI18N
        minWaitTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        minWaitTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minWaitTextFieldKeyReleased(evt);
            }
        });

        maxWaitTextField.setText(resourceMap.getString("maxWaitTextField.text")); // NOI18N
        maxWaitTextField.setName("maxWaitTextField"); // NOI18N
        maxWaitTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        maxWaitTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                maxWaitTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout delaysPanelLayout = new javax.swing.GroupLayout(delaysPanel);
        delaysPanel.setLayout(delaysPanelLayout);
        delaysPanelLayout.setHorizontalGroup(
            delaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(delaysPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(delaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minWaitLabel)
                    .addComponent(maxWaitLabel)
                    .addGroup(delaysPanelLayout.createSequentialGroup()
                        .addComponent(scriptDelayLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scriptDelayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(delaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxWaitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minWaitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        delaysPanelLayout.setVerticalGroup(
            delaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(delaysPanelLayout.createSequentialGroup()
                .addGroup(delaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minWaitLabel)
                    .addComponent(minWaitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(delaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxWaitLabel)
                    .addComponent(maxWaitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(delaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scriptDelayLabel)
                    .addComponent(scriptDelayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout serverStartupPanelLayout = new javax.swing.GroupLayout(serverStartupPanel);
        serverStartupPanel.setLayout(serverStartupPanelLayout);
        serverStartupPanelLayout.setHorizontalGroup(
            serverStartupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, serverStartupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serverStartupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(delaysPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(restrictionsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(failuresPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        serverStartupPanelLayout.setVerticalGroup(
            serverStartupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverStartupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(restrictionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(failuresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delaysPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        settingsTabbedPane.addTab(resourceMap.getString("serverStartupPanel.TabConstraints.tabTitle"), serverStartupPanel); // NOI18N

        closeButton.setText(resourceMap.getString("closeButton.text")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(settingsTabbedPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                    .addComponent(closeButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingsTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        NocToolsSettings.setCountSkypes(countSkypesCheckBox.isSelected());
        NocToolsSettings.setCountSkypesAfterMaxWait(countSkypesAfterMaxWaitCheckBox.isSelected());
        NocToolsSettings.setTestConnection(testConnectionCheckBox.isSelected());

        NocToolsSettings.setMaxFailuresPerServer(maxTaskFailures);
        NocToolsSettings.setMaxConnectionFailuresPerServer(maxConnectionFailures);
        NocToolsSettings.setMaxPsexecFailuresPerServer(maxPsexecFailures);

        NocToolsSettings.setWaitBetweenRemotes(minWait);
        NocToolsSettings.setMaxWaitBetweenRemotes(maxWait);
        NocToolsSettings.setStartupScriptDelay(scriptDelay);

        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void addUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserButtonActionPerformed
        JFrame mainFrame = NocToolsApp.getApplication().getMainFrame();
        userDetailsDialog = new UserDetailsDialog(mainFrame, true);
        userDetailsDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        userDetailsDialog.pack();
        userDetailsDialog.setLocationRelativeTo(mainFrame);
        userDetailsDialog.setTitle("Add New User");
        userDetailsDialog.setResizable(false);

        NocToolsApp.getApplication().show(userDetailsDialog);

        updateDbUserComboBox();
        updatetUsersList();
    }//GEN-LAST:event_addUserButtonActionPerformed

    private void removeUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeUserButtonActionPerformed
        // check if the user selected anything at all
        
        int selected = usersList.getSelectedIndex();
        if (-1 != selected)
        {
            String userToDelete = usersList.getSelectedValue().toString();
            if (!userToDelete.equalsIgnoreCase(dbUserComboBox.getSelectedItem().toString()))
            {
                // ask the user if he wants to delete this user
                int response = JOptionPane.YES_OPTION;

                response = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the user \"" + userToDelete + "\"",
                        "Remove User", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                if (response == JOptionPane.YES_OPTION)
                {
                    DefaultListModel model = (DefaultListModel) usersList.getModel();
                    model.removeElementAt(selected);
                    usersList.updateUI();
                    NocToolsSettings.getCredentials().remove(userToDelete);
                    NocToolsSettings.saveSettingsToFile();
                    updateDbUserComboBox();
                }
            }
            else
                JOptionPane.showMessageDialog(this, "This user is used for DB login. Please choose another user for DB login first");
        }
        else
            JOptionPane.showMessageDialog(this, "Please select a user to remove");
    }//GEN-LAST:event_removeUserButtonActionPerformed

    private void editUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editUserButtonActionPerformed
        // check if the user selected anything at all
        int selected = usersList.getSelectedIndex();
        if (-1 != selected)
        {
            JFrame mainFrame = NocToolsApp.getApplication().getMainFrame();
            DefaultListModel model = (DefaultListModel) usersList.getModel();
            String userToEdit = model.getElementAt(selected).toString();
            if (!userToEdit.equalsIgnoreCase(dbUserComboBox.getSelectedItem().toString()))
            {

                userDetailsDialog = new UserDetailsDialog(mainFrame, true, userToEdit);
                userDetailsDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                userDetailsDialog.pack();
                userDetailsDialog.setLocationRelativeTo(mainFrame);
                userDetailsDialog.setTitle("Edit User: " + userToEdit);
                userDetailsDialog.setResizable(false);

                NocToolsApp.getApplication().show(userDetailsDialog);

                updatetUsersList();
                updateDbUserComboBox();
            }
            else
                JOptionPane.showMessageDialog(this, "This user is used for DB login. Please choose another user for DB login first");
        }
        else
            JOptionPane.showMessageDialog(this, "Please select a user to edit");
    }//GEN-LAST:event_editUserButtonActionPerformed

    private void addConfigXmlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addConfigXmlButtonActionPerformed
        JFileChooser fc = new JFileChooser(NocToolsSettings.getScriptsDir());
        fc.setFileFilter(new XmlFileFilter());
        fc.setCurrentDirectory(new java.io.File(_currentConfigXmlDir));
        fc.setAcceptAllFileFilterUsed(false);
        
        int returnVal = fc.showDialog(this, "Select");

        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            //remember the folder from which you have loaded the last config.xml
            _currentConfigXmlDir = fc.getCurrentDirectory().toString();

            //System.out.println(fc.getSelectedFile().getName());
            String newConigXml = fc.getSelectedFile().getAbsolutePath();


            List<Element> configXmlNameList = NocToolsSettings.getConfigXmlFiles();

            // check if this config.xml already exists
            boolean found = false;

            Iterator <Element> configXmlIterator = configXmlNameList.iterator();

            while (configXmlIterator.hasNext() && !found)
            {
                Element fullPath = configXmlIterator.next().element("fullPath");
                if (fullPath.getText().equalsIgnoreCase(newConigXml))
                    found = true;

            }

            if (!found)
            {
                Element file = new DefaultElement("file");
                Element fullPath = new DefaultElement("fullPath");
                fullPath.setText(newConigXml);
                file.add(fullPath);
                NocToolsSettings.getConfigXmlFiles().add(file);
                NocToolsSettings.saveSettingsToFile();
                updateConfigXmlList();
            }
            else
                JOptionPane.showMessageDialog(this, "This config file already exists");
        }
    }//GEN-LAST:event_addConfigXmlButtonActionPerformed

    private void removeConfigXmlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeConfigXmlButtonActionPerformed
        // check if the user selected anything at all
        int selected = configXmlList.getSelectedIndex();
        if (-1 != selected)
        {
            String pathToRemove = configXmlList.getSelectedValue().toString();

            int response = JOptionPane.YES_OPTION;

            response = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove \"" + pathToRemove + "\"",
                    "Remove Config XML", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (response == JOptionPane.YES_OPTION)
            {            

                List<Element> configXmlFileList = NocToolsSettings.getConfigXmlFiles();
                List<Element> newConfigXmlFileList = new LinkedList<Element>();

                Iterator <Element> configXmlIterator = configXmlFileList.iterator();

                /*
                 * create a new temporary list and copy all the elements there except the
                 * one that we want to delete, and then put this list in the settings class
                 */
                while (configXmlIterator.hasNext())
                {
                    Element fileElement = configXmlIterator.next();
                    Element fullPath = fileElement.element("fullPath");
                    if (!fullPath.getText().equalsIgnoreCase(pathToRemove))
                        newConfigXmlFileList.add(fileElement);
                }
                NocToolsSettings.setConfigXmlFiles(newConfigXmlFileList);
                updateConfigXmlList();
                NocToolsSettings.saveSettingsToFile();
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Please select a path to remove");
    }//GEN-LAST:event_removeConfigXmlButtonActionPerformed

    private void addFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFilterButtonActionPerformed
        String serverName = JOptionPane.showInputDialog(this,
                "Please enter a server name (DNS name),\n in order to filter out this server from the server's tree",
                "Add filter", JOptionPane.PLAIN_MESSAGE);

        if (serverName != null)
        {
            if (!serverName.equalsIgnoreCase(""))
            {
                if (NocToolsSettings.getExcludeMap().containsKey(serverName))
                    JOptionPane.showMessageDialog(this, "This server already exists in the filter list");
                else
                {
                    NocToolsSettings.getExcludeMap().put(serverName, serverName);
                    NocToolsSettings.saveSettingsToFile();
                    updateFilterList();
                }
                filterList.updateUI();
            }
        }
    }//GEN-LAST:event_addFilterButtonActionPerformed

    private void removeFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFilterButtonActionPerformed
        // check if the user selected anything at all
        int selected = filterList.getSelectedIndex();
        if (-1 != selected)
        {
            String filterToDelete = filterList.getSelectedValue().toString();
            // ask the user if he wants to delete this filter
            int response = JOptionPane.YES_OPTION;

            response = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the filter \"" + filterToDelete + "\"",
                    "Remove Filter", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (response == JOptionPane.YES_OPTION)
            {
                DefaultListModel model = (DefaultListModel)filterList.getModel();
                model.removeElementAt(selected);
                filterList.updateUI();
                NocToolsSettings.getExcludeMap().remove(filterToDelete);
                NocToolsSettings.saveSettingsToFile();
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Please select a filter to remove");
    }//GEN-LAST:event_removeFilterButtonActionPerformed

    private void editFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFilterButtonActionPerformed
        // check if the user selected anything at all
        int selected = filterList.getSelectedIndex();
        if (-1 != selected)
        {
            String filterToEdit = filterList.getSelectedValue().toString();
            // ask the user if he wants to delete this filter


            String newFilter = JOptionPane.showInputDialog("Please enter a new server filter", filterToEdit);

            if (newFilter != null)
            {
                NocToolsSettings.getExcludeMap().remove(filterToEdit);
                NocToolsSettings.getExcludeMap().put(newFilter, newFilter);
                NocToolsSettings.saveSettingsToFile();
                updateFilterList();
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Please select a filter to edit");
    }//GEN-LAST:event_editFilterButtonActionPerformed

    private void credentialsManagerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_credentialsManagerCheckBoxActionPerformed
        NocToolsSettings.setUseCredentialsManager(credentialsManagerCheckBox.isSelected());

        NocToolsSettings.saveSettingsToFile();

        if (NocToolsSettings.getUseCredentialsManager())
            JOptionPane.showMessageDialog(this, "From now on, the RDP will use the credentials below");
    }//GEN-LAST:event_credentialsManagerCheckBoxActionPerformed

    private void doubleClickOnServerOpensRdpCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleClickOnServerOpensRdpCheckBoxActionPerformed
        NocToolsSettings.setDoubleClickOnServerOpensRdp(doubleClickOnServerOpensRdpCheckBox.isSelected());
    }//GEN-LAST:event_doubleClickOnServerOpensRdpCheckBoxActionPerformed

    private void doubleClickOnEmptyCollapsesTreeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleClickOnEmptyCollapsesTreeCheckBoxActionPerformed
        NocToolsSettings.setDoubleClickOnEmptyCollapsesTree(doubleClickOnEmptyCollapsesTreeCheckBox.isSelected());
    }//GEN-LAST:event_doubleClickOnEmptyCollapsesTreeCheckBoxActionPerformed

    private void rightClickOnEmptyClearsSelectionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightClickOnEmptyClearsSelectionCheckBoxActionPerformed
        NocToolsSettings.setRightClickOnEmptyClearsSelection(rightClickOnEmptyClearsSelectionCheckBox.isSelected());
    }//GEN-LAST:event_rightClickOnEmptyClearsSelectionCheckBoxActionPerformed

    private void dbUserComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbUserComboBoxActionPerformed
        String dbUser = NocToolsSettings.getDbUser() == null ? "no user" : NocToolsSettings.getDbUser();

        // if we selected the same user, do nothing. Otherwies save settings
        if (!dbUser.equalsIgnoreCase(dbUserComboBox.getSelectedItem().toString()))
        {
            NocToolsSettings.setDbUser(dbUserComboBox.getSelectedItem().toString());
            NocToolsSettings.saveSettingsToFile();
        }

    }//GEN-LAST:event_dbUserComboBoxActionPerformed

    private void taskFailuresTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taskFailuresTextFieldKeyReleased
        try
        {
            maxTaskFailures = Integer.parseInt(taskFailuresTextField.getText());
            if (maxTaskFailures >= 0 && maxTaskFailures <= NocToolsSettings.MAX_TASK_FAILURES_PER_SERVER)
            {
                taskFailuresLabel.setForeground(Color.BLACK);
            }
            else
            {
                taskFailuresLabel.setForeground(Color.RED);
                maxTaskFailures = -1;
            }
        }
        catch (Exception e)
        {
            taskFailuresLabel.setForeground(Color.RED);
            maxTaskFailures = -1;
        }
    }//GEN-LAST:event_taskFailuresTextFieldKeyReleased

    private void connectionFailuresTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_connectionFailuresTextFieldKeyReleased
        try
        {
            maxConnectionFailures = Integer.parseInt(connectionFailuresTextField.getText());
            if (maxConnectionFailures >= 0 && maxConnectionFailures <= NocToolsSettings.MAX_CONNECTION_FAILURES_PER_SERVER)
            {
                connectionFailuresLabel.setForeground(Color.BLACK);
            }
            else
            {
                connectionFailuresLabel.setForeground(Color.RED);
                maxConnectionFailures = -1;
            }
        }
        catch (Exception e)
        {
            connectionFailuresLabel.setForeground(Color.RED);
            maxConnectionFailures = -1;
        }
    }//GEN-LAST:event_connectionFailuresTextFieldKeyReleased

    private void psexecFailuresTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_psexecFailuresTextFieldKeyReleased
        try
        {
            maxPsexecFailures = Integer.parseInt(psexecFailuresTextField.getText());
            if (maxPsexecFailures >= 0 && maxPsexecFailures <= NocToolsSettings.MAX_PSEXEC_FAILURES_PER_SERVER)
            {
                psexecFailuresLabel.setForeground(Color.BLACK);
            }
            else
            {
                psexecFailuresLabel.setForeground(Color.RED);
                maxPsexecFailures = -1;
            }
        }
        catch (Exception e)
        {
            psexecFailuresLabel.setForeground(Color.RED);
            maxPsexecFailures = -1;
        }
    }//GEN-LAST:event_psexecFailuresTextFieldKeyReleased

    private void minWaitTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minWaitTextFieldKeyReleased
        try
        {
            minWait = Long.parseLong(minWaitTextField.getText());
            if (minWait >= NocToolsSettings.MIN_WAIT_BETWEEN_REMOTES
                    && minWait <= NocToolsSettings.MAX_WAIT_BETWEEN_REMOTES
                    && (minWait < NocToolsSettings.getMaxWaitBetweenRemotes()
                    || (maxWait > minWait && maxWait >= NocToolsSettings.MIN_WAIT_BETWEEN_REMOTES)))
            {
                minWaitLabel.setForeground(Color.BLACK);
            }
            else
            {
                minWaitLabel.setForeground(Color.RED);
                minWait = -1;
            }
        }
        catch (Exception e)
        {
            minWaitLabel.setForeground(Color.RED);
            minWait = -1;
        }
    }//GEN-LAST:event_minWaitTextFieldKeyReleased

    private void maxWaitTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxWaitTextFieldKeyReleased
        try
        {
            maxWait = Long.parseLong(maxWaitTextField.getText());
            if (maxWait >= NocToolsSettings.MIN_WAIT_BETWEEN_REMOTES
                    && maxWait <= NocToolsSettings.MAX_WAIT_BETWEEN_REMOTES
                    && (maxWait > NocToolsSettings.getWaitBetweenRemotes()
                    || (maxWait > minWait && minWait >= NocToolsSettings.MIN_WAIT_BETWEEN_REMOTES)))
            {
                maxWaitLabel.setForeground(Color.BLACK);
            }
            else
            {
                maxWaitLabel.setForeground(Color.RED);
                maxWait = -1;
            }
        }
        catch (Exception e)
        {
            maxWaitLabel.setForeground(Color.RED);
            maxWait = -1;
        }
    }//GEN-LAST:event_maxWaitTextFieldKeyReleased

    private void scriptDelayTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_scriptDelayTextFieldKeyReleased
        try
        {
            scriptDelay = Long.parseLong(scriptDelayTextField.getText());
            if (scriptDelay >= NocToolsSettings.MIN_STARTUP_SCRIPT_DELAY
                    && scriptDelay <= NocToolsSettings.MAX_STARTUP_SCRIPT_DELAY)
            {
                scriptDelayLabel.setForeground(Color.BLACK);
            }
            else
            {
                scriptDelayLabel.setForeground(Color.RED);
                scriptDelay = -1;
            }
        }
        catch (Exception e)
        {
            scriptDelayLabel.setForeground(Color.RED);
            scriptDelay = -1;
        }
    }//GEN-LAST:event_scriptDelayTextFieldKeyReleased

    private void serverPopupCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverPopupCheckBoxActionPerformed
        NocToolsSettings.setShowServerPopupMenu(serverPopupCheckBox.isSelected());
    }//GEN-LAST:event_serverPopupCheckBoxActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                NocToolsSettingsDialog dialog = new NocToolsSettingsDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private void updatetUsersList()
    {
        List<String> userNamesList = RdpManager.getUsersList();
        DefaultListModel usersListModel = new DefaultListModel();

        for (String user : userNamesList)
        {
            usersListModel.addElement(user);
        }
        usersList.setModel(usersListModel);
    }

    private void updateDbUserComboBox()
    {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        comboBoxModel.addElement("no user");

        List<String> userNamesList = RdpManager.getUsersList();
        for (String user : userNamesList)
        {
            comboBoxModel.addElement(user);
        }

        dbUserComboBox.setModel(comboBoxModel);

        if (NocToolsSettings.getDbUser() != null)
            dbUserComboBox.setSelectedItem(NocToolsSettings.getDbUser());
        else
            dbUserComboBox.setSelectedItem("no user");
    }

    private void updateConfigXmlList()
    {
        DefaultListModel model = new DefaultListModel();


        List<Element> configXmlNameList = NocToolsSettings.getConfigXmlFiles();
        for (Element file : configXmlNameList)
        {
            Element fullPath = file.element("fullPath");
            model.addElement(fullPath.getText());
        }

        configXmlList.setModel(model);
    }

    private void updateFilterList()
    {
        HashMap<String, String> filterMap = NocToolsSettings.getExcludeMap();
        Set<String> keySet = filterMap.keySet();
        Iterator <String> keyIterator = keySet.iterator();

        List<String> tempFilterList = new LinkedList<String>();
        DefaultListModel model = (DefaultListModel)filterList.getModel();
        while (keyIterator.hasNext())
        {
            tempFilterList.add(keyIterator.next());
        }

        // sort the list
        Collections.sort(tempFilterList);

        model.clear();
        for (String tempServer : tempFilterList)
            model.addElement(tempServer);
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addConfigXmlButton;
    private javax.swing.JButton addFilterButton;
    private javax.swing.JButton addUserButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JList configXmlList;
    private javax.swing.JPanel configXmlPanel;
    private javax.swing.JScrollPane configXmlScrollPane;
    private javax.swing.JPanel configXmlsPanel;
    private javax.swing.JLabel connectionFailuresLabel;
    private javax.swing.JTextField connectionFailuresTextField;
    private javax.swing.JCheckBox countSkypesAfterMaxWaitCheckBox;
    private javax.swing.JCheckBox countSkypesCheckBox;
    private javax.swing.JCheckBox credentialsManagerCheckBox;
    private javax.swing.JPanel credentialsManagerPanel;
    private javax.swing.JPanel credentialsPanel;
    private javax.swing.JComboBox dbUserComboBox;
    private javax.swing.JPanel dbUserPanel;
    private javax.swing.JPanel delaysPanel;
    private javax.swing.JCheckBox doubleClickOnEmptyCollapsesTreeCheckBox;
    private javax.swing.JCheckBox doubleClickOnServerOpensRdpCheckBox;
    private javax.swing.JButton editFilterButton;
    private javax.swing.JButton editUserButton;
    private javax.swing.JPanel failuresPanel;
    private javax.swing.JList filterList;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel maxWaitLabel;
    private javax.swing.JTextField maxWaitTextField;
    private javax.swing.JLabel minWaitLabel;
    private javax.swing.JTextField minWaitTextField;
    private javax.swing.JLabel psexecFailuresLabel;
    private javax.swing.JTextField psexecFailuresTextField;
    private javax.swing.JButton removeConfigXmlButton;
    private javax.swing.JButton removeFilterButton;
    private javax.swing.JButton removeUserButton;
    private javax.swing.JPanel restrictionsPanel;
    private javax.swing.JCheckBox rightClickOnEmptyClearsSelectionCheckBox;
    private javax.swing.JLabel scriptDelayLabel;
    private javax.swing.JTextField scriptDelayTextField;
    private javax.swing.JCheckBox serverPopupCheckBox;
    private javax.swing.JPanel serverStartupPanel;
    private javax.swing.JPanel serversTreePanel;
    private javax.swing.JTabbedPane settingsTabbedPane;
    private javax.swing.JLabel taskFailuresLabel;
    private javax.swing.JTextField taskFailuresTextField;
    private javax.swing.JCheckBox testConnectionCheckBox;
    private javax.swing.JPanel treeSettingsPanel;
    private javax.swing.JPanel usersCredentialsPanel;
    private javax.swing.JList usersList;
    private javax.swing.JScrollPane usersScrollPane;
    // End of variables declaration//GEN-END:variables
    private UserDetailsDialog userDetailsDialog;
    private static String _currentConfigXmlDir = "c:\\";
    private int maxConnectionFailures;
    private int maxPsexecFailures;
    private int maxTaskFailures;
    private long minWait;
    private long maxWait;
    private long scriptDelay;
}
